# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'processDlg_v2.0.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import time
import datetime
import cv2
import numpy as np
import pandas as pd
import math

import tensorflow as tf
import keras
from keras_retinanet import models
from keras_retinanet.models import backbone
from keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image
from keras_retinanet.utils.visualization import draw_box, draw_caption
from keras_retinanet.utils.colors import label_color

from lib.RetinaFinalModel import get_detected_image_retina, detect_video_retina

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, pyqtSignal, QDir, Qt, QUrl, QThread

from lib.VideoThread import VideoWorker

class prgressBarchange(QThread):
    changeVal = pyqtSignal(int)

    def run(self):
        self.changeVal.emit(p)


class Exe_Dialog(QDialog): # 이부분은 object를 QDialog로 변경
    def __init__(self):     # 추가
        super().__init__()   # 추가

        self.setupUi()  # 추가

        self.fname=''
        self.result_mp4=''
        self.now = datetime.datetime.now()
        self.nowDatetime = self.now.strftime('%Y-%m-%d %H:%M:%S')        

       
        self.initLockBtn()

        self.progressValthread = prgressBarchange()
             

        # Set tensorflow session as Keras backend
        self.sess = self.get_session()        
        keras.backend.tensorflow_backend.set_session(self.sess)

        # labels_to_names_seq = {0: 'marten',1:'waterdeer', 2:'wildboar', 3:'wildcat'}
        # self.labels_to_names_seq = {0: 'wildboar'}

        bundle_dir = getattr(sys, '_MEIPASS', os.path.abspath(os.path.dirname('videoMain.py')))
        print(bundle_dir)
        data_path = os.path.abspath(os.path.join(bundle_dir, 'model/retina_model.h5'))
        self.model_path = data_path
        self.retina_model = models.load_model(self.model_path, backbone_name='resnet50')
        self.append_log_msg('탐지모델이 로딩되었습니다.') 


    # 인트로 쓰레드 초기화
    def get_session(self):
        config = tf.ConfigProto()
        config.gpu_options.allow_growth = True 
        return tf.Session(config=config)    

    # 아래는 (self, Dialog)를 (self)로 수정하고 아래부분에 있는 변수인 Dialog만 self로 변경    
    

    def setupUi(self):       
        self.setObjectName("Dialog")
        self.resize(559, 548) 
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth()) 
        self.setSizePolicy(sizePolicy) 
        self.setMinimumSize(QtCore.QSize(559, 548))
        self.setMaximumSize(QtCore.QSize(559, 548)) 
        self.toolInputButton = QtWidgets.QToolButton(self) 
        self.toolInputButton.setGeometry(QtCore.QRect(430, 34, 111, 41)) 
        self.toolInputButton.setObjectName("toolInputButton")         

        self.toolSaveButton = QtWidgets.QToolButton(self) 
        self.toolSaveButton.setGeometry(QtCore.QRect(430, 94, 111, 41))
        self.toolSaveButton.setObjectName("toolSaveButton")
        self.groupBox_logoutput = QtWidgets.QGroupBox(self) 
        self.groupBox_logoutput.setGeometry(QtCore.QRect(10, 170, 541, 311))
        self.groupBox_logoutput.setObjectName("groupBox_logoutput")
        self.logPlainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox_logoutput)
        self.logPlainTextEdit.setGeometry(QtCore.QRect(10, 20, 521, 281))
        self.logPlainTextEdit.setObjectName("logPlainTextEdit")
        self.inputlineEdit = QtWidgets.QLineEdit(self)
        self.inputlineEdit.setGeometry(QtCore.QRect(100, 34, 321, 41))
        self.inputlineEdit.setObjectName("inputlineEdit")
        self.savetolineEdit = QtWidgets.QLineEdit(self)
        self.savetolineEdit.setGeometry(QtCore.QRect(100, 94, 321, 41))
        self.savetolineEdit.setObjectName("savetolineEdit")
        self.label_saveto = QtWidgets.QLabel(self)
        self.label_saveto.setGeometry(QtCore.QRect(22, 93, 61, 31))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_saveto.setFont(font)
        self.label_saveto.setObjectName("label_saveto")
        self.label_from = QtWidgets.QLabel(self)
        self.label_from.setGeometry(QtCore.QRect(26, 37, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_from.setFont(font)
        self.label_from.setObjectName("label_from")
        self.line = QtWidgets.QFrame(self)
        self.line.setGeometry(QtCore.QRect(85, 40, 20, 31))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self)
        self.line_2.setGeometry(QtCore.QRect(86, 100, 20, 31))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self)
        self.line_3.setGeometry(QtCore.QRect(20, 150, 521, 16))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.groupBox_input = QtWidgets.QGroupBox(self)
        self.groupBox_input.setGeometry(QtCore.QRect(10, 10, 541, 141))
        self.groupBox_input.setObjectName("groupBox_input")
        self.logOutputButton = QtWidgets.QPushButton(self)
        self.logOutputButton.setGeometry(QtCore.QRect(370, 490, 91, 41))
        self.logOutputButton.setObjectName("logOutputButton")
        self.exitButtonDlg = QtWidgets.QPushButton(self)
        self.exitButtonDlg.setGeometry(QtCore.QRect(464, 490, 75, 41))
        self.exitButtonDlg.setObjectName("exitButtonDlg")
        self.runExeButton = QtWidgets.QPushButton(self)
        self.runExeButton.setGeometry(QtCore.QRect(20, 490, 91, 41))
        self.runExeButton.setObjectName("runExeButton")
        self.exeProgressBar = QtWidgets.QProgressBar(self)
        self.exeProgressBar.setGeometry(QtCore.QRect(117, 495, 251, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exeProgressBar.sizePolicy().hasHeightForWidth())
        self.exeProgressBar.setSizePolicy(sizePolicy)
        self.exeProgressBar.setMinimumSize(QtCore.QSize(251, 31))
        self.exeProgressBar.setProperty("value", 0)
        self.exeProgressBar.setObjectName("exeProgressBar")
        self.groupBox_input.raise_()
        self.toolInputButton.raise_()
        self.toolSaveButton.raise_()
        self.groupBox_logoutput.raise_()
        self.inputlineEdit.raise_()
        self.savetolineEdit.raise_()
        self.label_saveto.raise_()
        self.label_from.raise_()
        self.line.raise_()
        self.line_2.raise_()
        self.line_3.raise_()
        self.logOutputButton.raise_()
        self.exitButtonDlg.raise_()
        self.runExeButton.raise_()
        self.exeProgressBar.raise_()

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

        # 시그널 초기화
        self.initSignal()
        

    def retranslateUi(self, QDialog):  #(self, Dialog) => (self, QDialog)로 변경
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Dialog", "Dialog"))
        self.toolInputButton.setText(_translate("Dialog", "..."))
        self.toolSaveButton.setText(_translate("Dialog", "..."))
        self.groupBox_logoutput.setTitle(_translate("Dialog", "진행 로그"))
        self.label_saveto.setText(_translate("Dialog", "Save To:"))
        self.label_from.setText(_translate("Dialog", "From:"))
        self.groupBox_input.setTitle(_translate("Dialog", "야생동물 동영상 파일을 지정합니다."))
        self.logOutputButton.setText(_translate("Dialog", "로그 내보내기"))
        self.exitButtonDlg.setText(_translate("Dialog", "종료"))
        self.runExeButton.setText(_translate("Dialog", "실행"))

    
    def initLockBtn(self):
        self.toolSaveButton.setEnabled(False)
        self.runExeButton.setEnabled(False)
        self.exitButtonDlg.setEnabled(False)
        self.logOutputButton.setEnabled(False)   
    
    # 시그널을 연결
    def initSignal(self):

        self.toolInputButton.clicked.connect(self.inputMP4)
        self.toolSaveButton.clicked.connect(self.outputMP4)
        self.runExeButton.clicked.connect(self.run_retinaModel)
        self.logOutputButton.clicked.connect(self.run_progress)  
        self.exitButtonDlg.clicked.connect(self.exitCall) 

    
    def exitCall(self):        
        self.sess.close()        
        self.close()
        #sys.exit(app.exec_())   
    
    def inputMP4(self):

        self.fname, _ = QFileDialog.getOpenFileName(self, "Open Movie",'.', "Video Files (*.mp4 *.avi)")
        if self.fname:           
            self.inputlineEdit.setText(self.fname)
            self.login()
            self.toolSaveButton.setEnabled(True)
        else:
            QMessageBox.about(self, "Warning", "파일을 선택하지 않았습니다.")

    def outputMP4(self):
        if self.fname !='':
            FILE_PREFIX = os.path.basename(self.fname).split('.')[0]
            created = str(math.ceil(time.time()))            
        else:
            QMessageBox.about(self, "Warning", "파일을 선택하지 않았습니다.")
            return None

        self.results = QFileDialog.getExistingDirectory(self, 'Select Directory')
       
        if os.path.isdir(self.results):
            self.result_mp4 = os.path.join(self.results, FILE_PREFIX + '_result_' + created + '.mp4')           
            self.savetolineEdit.setText(self.result_mp4)
            self.logout()
        else:
            QMessageBox.about(self, "Warning", "파일을 선택하지 않았습니다.")  
    
    def login(self):    
        
        self.mp4_size = os.path.getsize(self.fname)
        self.log_content = f'입력동영상 {self.fname} 파일이 선택했습니다.' + '\n'
        self.log_content = self.log_content + "파일크기(mb): " + str(self.mp4_size / (1024*1024))                
        self.append_log_msg(self.log_content)        

    def logout(self):
        self.runExeButton.setEnabled(True)        
        self.log_content = f'{self.result_mp4} 파일로 저장됩니다.'
        self.append_log_msg(self.log_content)

    @pyqtSlot()
    def run_progress(self):
        self.append_log_msg('모델평가 결과 저장완료')
        self.exitButtonDlg.setEnabled(True)
        

    def processing(self, start):
        limit = 101
        count = start
        while count < limit:
            time.sleep(0.5)
            self.exeProgressBar.setValue(count)            
            count +=1

    def progressValchange(self):
        self.progressValthread.changeVal.connect(self.processing)         


    @pyqtSlot()    
    def run_retinaModel(self): 
        
        # 로딩바 구현
        self.start = time.time()  
        created_time = str(math.ceil(self.start))
        self.runExeButton.setEnabled(False)
        self.append_log_msg('야생동물 탐지가 시작되었습니다.') 
        
        limit = 100
        count = 0
        while count < limit - 50:
            time.sleep(0.5)
            self.exeProgressBar.setValue(count)            
            count +=1 
        
        if self.fname !='':
                       
            self.results_out = detect_video_retina(self.retina_model, self.fname, output_path=self.result_mp4)
            self.sess.close()
            # print(self.results_out)

            self.exeProgressBar.setValue(50)
            limit = 70
            count = 50
            while count < limit:
                time.sleep(0.5)
                self.exeProgressBar.setValue(count)            
                count +=1 

            csv_path = os.path.join(self.results, created_time + '_result.csv')
            result_csv = pd.DataFrame(self.results_out)
            result_csv.to_csv(csv_path)

            self.exeProgressBar.setValue(70)
            self.processing(70)

            self.append_log_msg(csv_path + ' 에 모델평가 결과 저장완료')
            
            timed = round(time.time()-self.start, 5)            
            min = int(timed / 60)
            second = ((timed / 60) - min) * 60 
            lapse_time =f" 탐지시간은 {min}분 {second :.0f}초 걸렸습니다."

            self.append_log_msg(lapse_time)
            self.runExeButton.setEnabled(True)            
            self.logOutputButton.setEnabled(True) 

            # 로딩 바 끝
        else:
            QMessageBox.about(self, "Warning", "파일을 선택하지 않았습니다.")
            self.runExeButton.setEnabled(True)
            self.sess.close()
            # 로딩 바 끝

    def showProgressDownLoading(self, stream, chunk, bytes_remaining):
        print(bytes_remaining)
        self.exeProgressBar.setValue(int(((self.mp4_fsize - bytes_remaining) / self.mp4_fsize) * 100))

    def append_log_msg(self, act):        

        app_msg = act + '- (' + self.nowDatetime + ')'        
        self.logPlainTextEdit.appendPlainText(app_msg) 

        # 활동 로그 저장(또는 DB를 사용 추천)
        log_path = os.path.join(os.getcwd(), 'log')
        log_dir = os.path.isdir(log_path)

        if not log_dir:
            os.mkdir(log_path)

        log_txt = os.path.join(log_path, 'log.txt')

        with open(log_txt, 'a') as f:
            f.write(app_msg+'\n')


if __name__ == "__main__":    
    app = QApplication(sys.argv)    
    ui = Exe_Dialog()        
    ui.show()
    sys.exit(app.exec_())






    


    

